# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import predictions_pb2 as predictions__pb2


class PredictionsStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.IrisSpeciesPredict = channel.unary_unary(
                '/Predictions/IrisSpeciesPredict',
                request_serializer=predictions__pb2.IrisSpeciesPredictionRequest.SerializeToString,
                response_deserializer=predictions__pb2.IrisSpeciesPredictionResponse.FromString,
                )
        self.BrainTumorPredict = channel.unary_unary(
                '/Predictions/BrainTumorPredict',
                request_serializer=predictions__pb2.BrainTumorPredictionRequest.SerializeToString,
                response_deserializer=predictions__pb2.BrainTumorPredictionResponse.FromString,
                )
        self.CreateAndTrainModel = channel.unary_unary(
                '/Predictions/CreateAndTrainModel',
                request_serializer=predictions__pb2.CreateAndTrainModelRequest.SerializeToString,
                response_deserializer=predictions__pb2.CreateAndTrainModelResponse.FromString,
                )


class PredictionsServicer(object):
    """Missing associated documentation comment in .proto file."""

    def IrisSpeciesPredict(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def BrainTumorPredict(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateAndTrainModel(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_PredictionsServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'IrisSpeciesPredict': grpc.unary_unary_rpc_method_handler(
                    servicer.IrisSpeciesPredict,
                    request_deserializer=predictions__pb2.IrisSpeciesPredictionRequest.FromString,
                    response_serializer=predictions__pb2.IrisSpeciesPredictionResponse.SerializeToString,
            ),
            'BrainTumorPredict': grpc.unary_unary_rpc_method_handler(
                    servicer.BrainTumorPredict,
                    request_deserializer=predictions__pb2.BrainTumorPredictionRequest.FromString,
                    response_serializer=predictions__pb2.BrainTumorPredictionResponse.SerializeToString,
            ),
            'CreateAndTrainModel': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateAndTrainModel,
                    request_deserializer=predictions__pb2.CreateAndTrainModelRequest.FromString,
                    response_serializer=predictions__pb2.CreateAndTrainModelResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'Predictions', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Predictions(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def IrisSpeciesPredict(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Predictions/IrisSpeciesPredict',
            predictions__pb2.IrisSpeciesPredictionRequest.SerializeToString,
            predictions__pb2.IrisSpeciesPredictionResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def BrainTumorPredict(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Predictions/BrainTumorPredict',
            predictions__pb2.BrainTumorPredictionRequest.SerializeToString,
            predictions__pb2.BrainTumorPredictionResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CreateAndTrainModel(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Predictions/CreateAndTrainModel',
            predictions__pb2.CreateAndTrainModelRequest.SerializeToString,
            predictions__pb2.CreateAndTrainModelResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
